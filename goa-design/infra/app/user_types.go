// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "RESTAPI": Application User Types
//
// Command:
// $ goagen
// --design=MYGO/studying/goa-design/design
// --out=$(GOPATH)/src/MYGO/studying/goa-design/infra
// --version=v1.3.1

package app

// Partner definition
type partner struct {
	Active *bool   `form:"Active,omitempty" json:"Active,omitempty" yaml:"Active,omitempty" xml:"Active,omitempty"`
	City   *string `form:"City,omitempty" json:"City,omitempty" yaml:"City,omitempty" xml:"City,omitempty"`
	// Unique partner code
	Code     *string `form:"Code,omitempty" json:"Code,omitempty" yaml:"Code,omitempty" xml:"Code,omitempty"`
	Country  *string `form:"Country,omitempty" json:"Country,omitempty" yaml:"Country,omitempty" xml:"Country,omitempty"`
	District *string `form:"District,omitempty" json:"District,omitempty" yaml:"District,omitempty" xml:"District,omitempty"`
	// Partner Identity
	ID *int `form:"ID,omitempty" json:"ID,omitempty" yaml:"ID,omitempty" xml:"ID,omitempty"`
	// Check Partner is company or invidual
	IsCompany   *bool   `form:"IsCompany,omitempty" json:"IsCompany,omitempty" yaml:"IsCompany,omitempty" xml:"IsCompany,omitempty"`
	JobPosition *string `form:"JobPosition,omitempty" json:"JobPosition,omitempty" yaml:"JobPosition,omitempty" xml:"JobPosition,omitempty"`
	// Partner Name
	Name *string `form:"Name,omitempty" json:"Name,omitempty" yaml:"Name,omitempty" xml:"Name,omitempty"`
	// Type of partner: shipping address/invoice address/employee
	PartnerType *string `form:"PartnerType,omitempty" json:"PartnerType,omitempty" yaml:"PartnerType,omitempty" xml:"PartnerType,omitempty"`
	Street      *string `form:"Street,omitempty" json:"Street,omitempty" yaml:"Street,omitempty" xml:"Street,omitempty"`
	Street2     *string `form:"Street2,omitempty" json:"Street2,omitempty" yaml:"Street2,omitempty" xml:"Street2,omitempty"`
	Title       *string `form:"Title,omitempty" json:"Title,omitempty" yaml:"Title,omitempty" xml:"Title,omitempty"`
	Zip         *string `form:"Zip,omitempty" json:"Zip,omitempty" yaml:"Zip,omitempty" xml:"Zip,omitempty"`
}

// Publicize creates Partner from partner
func (ut *partner) Publicize() *Partner {
	var pub Partner
	if ut.Active != nil {
		pub.Active = ut.Active
	}
	if ut.City != nil {
		pub.City = ut.City
	}
	if ut.Code != nil {
		pub.Code = ut.Code
	}
	if ut.Country != nil {
		pub.Country = ut.Country
	}
	if ut.District != nil {
		pub.District = ut.District
	}
	if ut.ID != nil {
		pub.ID = ut.ID
	}
	if ut.IsCompany != nil {
		pub.IsCompany = ut.IsCompany
	}
	if ut.JobPosition != nil {
		pub.JobPosition = ut.JobPosition
	}
	if ut.Name != nil {
		pub.Name = ut.Name
	}
	if ut.PartnerType != nil {
		pub.PartnerType = ut.PartnerType
	}
	if ut.Street != nil {
		pub.Street = ut.Street
	}
	if ut.Street2 != nil {
		pub.Street2 = ut.Street2
	}
	if ut.Title != nil {
		pub.Title = ut.Title
	}
	if ut.Zip != nil {
		pub.Zip = ut.Zip
	}
	return &pub
}

// Partner definition
type Partner struct {
	Active *bool   `form:"Active,omitempty" json:"Active,omitempty" yaml:"Active,omitempty" xml:"Active,omitempty"`
	City   *string `form:"City,omitempty" json:"City,omitempty" yaml:"City,omitempty" xml:"City,omitempty"`
	// Unique partner code
	Code     *string `form:"Code,omitempty" json:"Code,omitempty" yaml:"Code,omitempty" xml:"Code,omitempty"`
	Country  *string `form:"Country,omitempty" json:"Country,omitempty" yaml:"Country,omitempty" xml:"Country,omitempty"`
	District *string `form:"District,omitempty" json:"District,omitempty" yaml:"District,omitempty" xml:"District,omitempty"`
	// Partner Identity
	ID *int `form:"ID,omitempty" json:"ID,omitempty" yaml:"ID,omitempty" xml:"ID,omitempty"`
	// Check Partner is company or invidual
	IsCompany   *bool   `form:"IsCompany,omitempty" json:"IsCompany,omitempty" yaml:"IsCompany,omitempty" xml:"IsCompany,omitempty"`
	JobPosition *string `form:"JobPosition,omitempty" json:"JobPosition,omitempty" yaml:"JobPosition,omitempty" xml:"JobPosition,omitempty"`
	// Partner Name
	Name *string `form:"Name,omitempty" json:"Name,omitempty" yaml:"Name,omitempty" xml:"Name,omitempty"`
	// Type of partner: shipping address/invoice address/employee
	PartnerType *string `form:"PartnerType,omitempty" json:"PartnerType,omitempty" yaml:"PartnerType,omitempty" xml:"PartnerType,omitempty"`
	Street      *string `form:"Street,omitempty" json:"Street,omitempty" yaml:"Street,omitempty" xml:"Street,omitempty"`
	Street2     *string `form:"Street2,omitempty" json:"Street2,omitempty" yaml:"Street2,omitempty" xml:"Street2,omitempty"`
	Title       *string `form:"Title,omitempty" json:"Title,omitempty" yaml:"Title,omitempty" xml:"Title,omitempty"`
	Zip         *string `form:"Zip,omitempty" json:"Zip,omitempty" yaml:"Zip,omitempty" xml:"Zip,omitempty"`
}
